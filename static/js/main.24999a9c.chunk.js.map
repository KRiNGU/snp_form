{"version":3,"sources":["components/Document/Document.jsx","redux/Fields/slices.js","components/InputField/InputField.jsx","components/SelectField/SelectField.jsx","components/Form/Form.jsx","App.js","reportWebVitals.js","redux/store.js","index.js"],"names":["Document","props","name","useSelector","state","secondName","patronymic","dateOfBirth","email","sex","className","memo","initialState","localStorage","getItem","fieldsSlice","createSlice","reducers","changeValue","payload","id","value","actions","reducer","InputField","useState","setValue","error","setError","dispatch","useDispatch","validate","validityFunction","useEffect","setItem","placeholder","necessarily","onBlur","e","handleBlur","target","type","onChange","handleChange","SelectField","selected","setSelected","console","log","options","map","option","Form","length","test","optional","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","fieldReducer","devTools","process","NODE_EN","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.24999a9c.chunk.js","sourcesContent":["import { memo } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport './Document.css';\r\n\r\nconst Document = (props) => {\r\n    const name = useSelector((state) => state.name);\r\n    const secondName = useSelector((state) => state.secondName);\r\n    const patronymic = useSelector((state) => state.patronymic);\r\n    const dateOfBirth = useSelector((state) => state.dateOfBirth);\r\n    const email = useSelector((state) => state.email);\r\n    const sex = useSelector((state) => state.sex);\r\n\r\n    return (<div>\r\n        Данные, которые будут известны о вас:\r\n        <ul className=\"data__list\">\r\n            <li>Имя : {name}</li>\r\n            <li>Фамилия : {secondName}</li>\r\n            <li>Отчество : {patronymic}</li>\r\n            <li>Дата рождения : {dateOfBirth}</li>\r\n            <li>Email : {email}</li>\r\n            <li>Пол : {sex}</li>\r\n        </ul>\r\n    </div>)\r\n}\r\n\r\nexport default memo(Document);","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst initialState = {\r\n    name: localStorage.getItem(\"name\") ?? '',\r\n    secondName: localStorage.getItem(\"secondName\") ?? '',\r\n    patronymic: localStorage.getItem(\"patronymic\") ?? '',\r\n    sex: localStorage.getItem(\"sex\") ?? '',\r\n    dateOfBirth: localStorage.getItem(\"dateOfBirth\") ?? '',\r\n    email: localStorage.getItem(\"email\") ?? '',\r\n}\r\n\r\nexport const fieldsSlice = createSlice({\r\n    name: 'fields',\r\n    initialState,\r\n    reducers: {\r\n        changeValue: (state, {payload: {id, value}}) => {\r\n            state[id] = value;\r\n        }\r\n    }\r\n});\r\n\r\nconst {actions, reducer} = fieldsSlice;\r\n\r\nexport const {changeValue} = actions;\r\n\r\nexport default reducer;","import { memo, useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { changeValue } from '../../redux/Fields/slices';\r\nimport './InputField.css'\r\n\r\nconst InputField = (props) => {\r\n    const [value, setValue] = useState(localStorage.getItem(props.id) ?? '');\r\n    const [error, setError] = useState('');\r\n    const dispatch = useDispatch();\r\n\r\n    const validate = (value) => {\r\n        setError(props.validityFunction(value));\r\n    }\r\n\r\n    const handleChange = (value) => {\r\n        dispatch(changeValue({id: props.id, value}));\r\n        setValue(value);\r\n        validate(value);\r\n    }\r\n\r\n    const handleBlur = (value) => {\r\n        validate(value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(props.id, value);\r\n    }, [props.id, value]);\r\n\r\n    return(\r\n        <div className=\"input-field\">\r\n            <label >{props.placeholder}{props.necessarily &&  <span className=\"necessarily\">*</span> }</label>\r\n            <input onBlur={(e) => handleBlur(e.target.value)} className=\"input__text-field\" type=\"text\" onChange={(e) => handleChange(e.target.value)} value={value}/> \r\n            <label className=\"text-field__error\">{error}</label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default memo(InputField);","import { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { changeValue } from '../../redux/Fields/slices';\r\nimport './SelectField.css';\r\n\r\nconst SelectField = (props) => {\r\n    const dispatch = useDispatch();\r\n    const [selected, setSelected] = useState(localStorage.getItem(props.id) ?? props.placeholder);\r\n    console.log(props.options);\r\n\r\n    const handleChange = (value) => {\r\n        dispatch(changeValue({id: props.id, value}));\r\n        setSelected(value);\r\n    };\r\n    \r\n    useEffect(() => {\r\n        localStorage.setItem(props.id, selected);\r\n    }, [props.id, selected]);\r\n\r\n    return (\r\n        <div className=\"select\">\r\n            <label>{props.placeholder}</label>\r\n            <select className=\"select-field\" value={selected} onChange={(e) => handleChange(e.target.value)}>\r\n                <option value=\"\">-</option>\r\n                {props.options.map(option => <option key={option} value={option}>{option}</option>)}\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SelectField;\r\n","import { memo } from 'react';\r\nimport InputField from '../InputField/InputField';\r\nimport SelectField from '../SelectField/SelectField';\r\n\r\nconst Form = (props) => {\r\n    return (\r\n    <>\r\n        <p>Форма ввода данных о пользователе:</p>\r\n        <form className=\"form\">\r\n            <InputField\r\n                id='name'\r\n                placeholder=\"Имя\"\r\n                validityFunction={(value) => { \r\n                    if (value.length === 0) {\r\n                        return 'Введите имя';\r\n                    } else if (!/^[a-zA-Zа-яА-Я\\-'/]+$/.test(value)) {\r\n                        return \"Имя должно содержать только буквы, символ - или символ '\";\r\n                    } else return '';\r\n                }}\r\n                necessarily={true}\r\n            />\r\n            <InputField\r\n                id='secondName'\r\n                placeholder=\"Фамилия\"\r\n                validityFunction={(value) => { \r\n                    if (value.length === 0) {\r\n                        return 'Введите фамилию';\r\n                    } else if (!/^[a-zA-Zа-яА-Я\\-'/]+$/.test(value)) {\r\n                        return \"Фамилия должно содержать только буквы, символ - или символ '\";\r\n                    } else return '';\r\n                }}\r\n                necessarily={true}\r\n            />\r\n            <InputField\r\n                id='patronymic'\r\n                placeholder=\"Отчество\"\r\n                validityFunction={(value) => { \r\n                    if (!/^[a-zA-Zа-яА-Я\\-'/]+$/.test(value)) {\r\n                        return \"Отчество должно содержать только буквы, символ - или символ '\";\r\n                    } else return '';\r\n                }}\r\n            />\r\n            <SelectField\r\n            id='sex'\r\n            placeholder='Выберите пол'\r\n            options={['Мужчина', 'Женщина']}\r\n            optional={false}\r\n            />\r\n            <InputField\r\n                id='dateOfBirth'\r\n                placeholder=\"Дата рождения\"\r\n                validityFunction={(value) => {\r\n                    if (!/^(0[1-9]|[12][0-9]|3[01])\\.[0-1][0-9]\\.(2[09]|19)[0-9][0-9]$/.test(value)) {\r\n                        return 'Введите дату рождения в формате ДД.ММ.ГГГГ';\r\n                    } else return '';\r\n                }}\r\n            />\r\n            <InputField\r\n                id='email'\r\n                placeholder=\"Email\"\r\n                validityFunction={(value) => {\r\n                    if (!/\\w+@\\w+\\.\\w+/.test(value)) {\r\n                        return 'Введите корректный Email';\r\n                    } else return '';\r\n                }}\r\n            />\r\n    </form>\r\n  </>)\r\n}\r\n\r\nexport default memo(Form);","import './App.css';\nimport Document from './components/Document/Document';\nimport Form from './components/Form/Form';\n\n\nconst App = () => {\n\n  return (\n    <>\n     <Form></Form>\n     <Document></Document>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport fieldReducer from './Fields/slices.js';\r\n\r\nexport const store = configureStore({\r\n    reducer: fieldReducer,\r\n    devTools: process.env.NODE_EN !== 'production',\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './redux/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}