{"version":3,"sources":["components/Document/Document.jsx","redux/Fields/slices.js","components/Field/CheckboxField/CheckboxField.jsx","components/Field/InputField/InputField.jsx","components/Field/SelectField/SelectField.jsx","components/Form/Form.jsx","App.js","reportWebVitals.js","redux/store.js","index.js"],"names":["Document","name","useSelector","state","secondName","patronymic","dateOfBirth","email","sex","advertising","className","memo","initialState","localStorage","getItem","JSON","parse","fieldsSlice","createSlice","reducers","changeValue","payload","id","value","actions","reducer","CheckboxField","props","useState","checked","setChecked","dispatch","useDispatch","useEffect","setItem","stringify","placeholder","necessarily","type","onChange","InputField","setValue","error","setError","validate","validityFunction","onBlur","e","handleBlur","target","handleChange","SelectField","selected","setSelected","options","map","option","Form","length","test","optional","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","fieldReducer","devTools","process","NODE_EN","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8f7c4bcd.chunk.js","sourcesContent":["import { memo } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport './Document.css';\r\n\r\nconst Document = () => {\r\n    const name = useSelector((state) => state.name);\r\n    const secondName = useSelector((state) => state.secondName);\r\n    const patronymic = useSelector((state) => state.patronymic);\r\n    const dateOfBirth = useSelector((state) => state.dateOfBirth);\r\n    const email = useSelector((state) => state.email);\r\n    const sex = useSelector((state) => state.sex);\r\n    const advertising = useSelector((state) => state.advertising);\r\n\r\n    return (\r\n    <div className=\"document\">\r\n        <p>Данные, которые будут известны о вас</p>\r\n        <ul className=\"data__list\">\r\n            <li className=\"data-list__field\">Фамилия : {secondName}</li>\r\n            <li className=\"data-list__field\">Имя : {name}</li>\r\n            <li className=\"data-list__field\">Отчество : {patronymic}</li>\r\n            <li className=\"data-list__field\">Пол : {sex}</li>\r\n            <li className=\"data-list__field\">Дата рождения : {dateOfBirth}</li>\r\n            <li className=\"data-list__field\">Email : {email}</li>\r\n            <li className=\"data-list__field\">Согласен на рекламу : {advertising ? 'Да' : 'Нет'}</li>\r\n        </ul>\r\n    </div>)\r\n}\r\n\r\nexport default memo(Document);","import { createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\nconst initialState = {\r\n    name: localStorage.getItem('name') ?? '',\r\n    secondName: localStorage.getItem('secondName') ?? '',\r\n    patronymic: localStorage.getItem('patronymic') ?? '',\r\n    sex: localStorage.getItem('sex') ?? '',\r\n    dateOfBirth: localStorage.getItem('dateOfBirth') ?? '',\r\n    email: localStorage.getItem('email') ?? '',\r\n    advertising: JSON.parse(localStorage.getItem('advertising') ?? false),\r\n}\r\n\r\nexport const fieldsSlice = createSlice({\r\n    name: 'fields',\r\n    initialState,\r\n    reducers: {\r\n        changeValue: (state, {payload: {id, value}}) => {\r\n            state[id] = value;\r\n        }\r\n    }\r\n});\r\n\r\nconst {actions, reducer} = fieldsSlice;\r\n\r\nexport const {changeValue} = actions;\r\n\r\nexport default reducer;","import { memo, useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { changeValue } from '../../../redux/Fields/slices';\r\nimport '../Field.css';\r\nimport './CheckboxField.css';\r\n\r\nconst CheckboxField = (props) => {\r\n    const [checked, setChecked] = useState(JSON.parse(localStorage.getItem(props.id) ?? false));\r\n    const dispatch = useDispatch();\r\n\r\n    const handleChange = () => {\r\n        dispatch(changeValue({id: props.id, value: !checked}));\r\n        setChecked(!checked);\r\n    }\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(props.id, JSON.stringify(checked));\r\n    }, [props.id, checked]);\r\n\r\n    return(\r\n        <div className=\"checkbox\">\r\n            <label className=\"checkbox-label\">{props.placeholder}{props.necessarily &&  <span className=\"necessarily\">*</span> }</label>\r\n            <input className=\"field checkbox__field\" type=\"checkbox\" onChange={() => handleChange()} checked={checked}/> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default memo(CheckboxField);","import { memo, useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { changeValue } from '../../../redux/Fields/slices';\r\nimport '../Field.css';\r\nimport './InputField.css';\r\n\r\nconst InputField = (props) => {\r\n    const [value, setValue] = useState(localStorage.getItem(props.id) ?? '');\r\n    const [error, setError] = useState('');\r\n    const dispatch = useDispatch();\r\n\r\n    const validate = (value) => {\r\n        setError(props.validityFunction(value));\r\n    }\r\n\r\n    const handleChange = (value) => {\r\n        dispatch(changeValue({id: props.id, value}));\r\n        setValue(value);\r\n        validate(value);\r\n    }\r\n\r\n    const handleBlur = (value) => {\r\n        validate(value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(props.id, value);\r\n    }, [props.id, value]);\r\n\r\n    return(\r\n        <div className=\"input\">\r\n            <label className=\"header-label\">{props.placeholder}{props.necessarily &&  <span className=\"necessarily\"> *</span> }</label>\r\n            <input onBlur={(e) => handleBlur(e.target.value)} className=\"field input__field\" type=\"text\" onChange={(e) => handleChange(e.target.value)} value={value}/> \r\n            <label className=\"input__error\">{error}</label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default memo(InputField);","import { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { changeValue } from '../../../redux/Fields/slices';\r\nimport '../Field.css';\r\nimport './SelectField.css';\r\n\r\nconst SelectField = (props) => {\r\n    const dispatch = useDispatch();\r\n    const [selected, setSelected] = useState(localStorage.getItem(props.id) ?? props.placeholder);\r\n\r\n    const handleChange = (value) => {\r\n        dispatch(changeValue({id: props.id, value}));\r\n        setSelected(value);\r\n    };\r\n    \r\n    useEffect(() => {\r\n        localStorage.setItem(props.id, selected);\r\n    }, [props.id, selected]);\r\n\r\n    return (\r\n        <div className=\"select\">\r\n            <label className=\"header-label\">{props.placeholder}</label>\r\n            <select className=\"field select-field\" value={selected} onChange={(e) => handleChange(e.target.value)}>\r\n                <option value=\"\" className=\"select__option\">-</option>\r\n                {props.options.map(option => <option className=\"select__option\" key={option} value={option}>{option}</option>)}\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SelectField;\r\n","import { memo } from 'react';\r\nimport CheckboxField from '../Field/CheckboxField/CheckboxField.jsx';\r\nimport InputField from '../Field/InputField/InputField.jsx';\r\nimport SelectField from '../Field/SelectField/SelectField.jsx';\r\nimport './Form.css';\r\n\r\nconst Form = (props) => {\r\n    return (\r\n    <div>\r\n        <p>Форма ввода данных о пользователе</p>\r\n        <form className=\"form\">\r\n            <InputField\r\n                id='secondName'\r\n                placeholder='Фамилия'\r\n                validityFunction={(value) => { \r\n                    if (value.length === 0) {\r\n                        return 'Введите фамилию';\r\n                    } else if (!/^[a-zA-Zа-яА-Я\\-'/]+$/.test(value)) {\r\n                        return \"Фамилия должно содержать только буквы, символ - или символ '\";\r\n                    } else if (!/^[A-ZА-Я]/.test(value)) {\r\n                        return 'Первая буква фамилии должна быть заглавной';\r\n                    } else return '';\r\n                }}\r\n                necessarily={true}\r\n            />\r\n            <InputField\r\n                id='name'\r\n                placeholder='Имя'\r\n                validityFunction={(value) => { \r\n                    if (value.length === 0) {\r\n                        return 'Введите имя';\r\n                    } else if (!/^[a-zA-Zа-яА-Я\\-'/]+$/.test(value)) {\r\n                        return \"Имя должно содержать только буквы, символ - или символ '\";\r\n                    } else if (!/^[A-ZА-Я]/.test(value)) {\r\n                        return 'Первая буква имени должна быть заглавной';\r\n                    } else return '';\r\n                }}\r\n                necessarily={true}\r\n            />\r\n            <InputField\r\n                id='patronymic'\r\n                placeholder='Отчество'\r\n                validityFunction={(value) => { \r\n                    if (!/^[a-zA-Zа-яА-Я\\-'/]+$/.test(value)) {\r\n                        return \"Отчество должно содержать только буквы, символ - или символ '\";\r\n                    } else if (!/^[A-ZА-Я]/.test(value)) {\r\n                        return 'Первая буква отчества должна быть заглавной';\r\n                    } else return '';\r\n                }}\r\n            />\r\n            <SelectField\r\n            id='sex'\r\n            placeholder='Пол'\r\n            options={['Мужчина', 'Женщина']}\r\n            optional={false}\r\n            />\r\n            <InputField\r\n                id='dateOfBirth'\r\n                placeholder='Дата рождения'\r\n                validityFunction={(value) => {\r\n                    if (!/^\\d\\d\\.\\d\\d\\.\\d\\d\\d\\d$/.test(value)) {\r\n                        return 'Введите дату рождения в формате ДД.ММ.ГГГГ'\r\n                    }\r\n                    if (!/^(0[1-9]|[12]\\d|3[01])\\.[0-1]\\d\\.(2[09]|19)\\d\\d$/.test(value)) {\r\n                        return 'Такая дата невозможна';\r\n                    } else return '';\r\n                }}\r\n            />\r\n            <InputField\r\n                id='email'\r\n                placeholder='Email'\r\n                validityFunction={(value) => {\r\n                    if (!/\\w+@\\w+\\.\\w+/.test(value)) {\r\n                        return 'Введите корректный Email';\r\n                    } else return '';\r\n                }}\r\n            />\r\n            <CheckboxField\r\n                id='advertising'\r\n                placeholder='Согласен на обработку рекламы'\r\n            />\r\n    </form>\r\n  </div>)\r\n}\r\n\r\nexport default memo(Form);","import './App.css';\nimport Document from './components/Document/Document';\nimport Form from './components/Form/Form';\n\n\nconst App = () => {\n\n  return (\n    <div className=\"main\">\n     <Form></Form>\n     <Document></Document>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport fieldReducer from './Fields/slices.js';\r\n\r\nexport const store = configureStore({\r\n    reducer: fieldReducer,\r\n    devTools: process.env.NODE_EN !== 'production',\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './redux/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}