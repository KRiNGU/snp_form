{"version":3,"sources":["components/Document/Document.jsx","redux/Fields/slices.js","components/Field/CheckboxField/CheckboxField.jsx","components/Field/InputField/InputField.jsx","components/Field/SelectField/SelectField.jsx","utils/ValidateFunctions.jsx","components/Form/Form.jsx","App.js","reportWebVitals.js","redux/store.js","index.js"],"names":["Document","name","useSelector","state","secondName","patronymic","dateOfBirth","email","sex","advertising","className","memo","initialState","localStorage","getItem","JSON","parse","fieldsSlice","createSlice","reducers","changeValue","payload","id","value","actions","reducer","CheckboxField","placeholder","necessarily","useState","checked","setChecked","dispatch","useDispatch","handleChange","useCallback","useEffect","setItem","stringify","type","onChange","InputField","validityFunction","setValue","error","setError","validate","e","target","handleBlur","onBlur","SelectField","options","selected","setSelected","map","option","validityFunctions","length","test","Form","validation","optional","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","fieldReducer","devTools","process","NODE_EN","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iWAIMA,EAAW,WACb,IAAMC,EAAOC,aAAY,SAACC,GAAD,OAAWA,EAAMF,QACpCG,EAAaF,aAAY,SAACC,GAAD,OAAWA,EAAMC,cAC1CC,EAAaH,aAAY,SAACC,GAAD,OAAWA,EAAME,cAC1CC,EAAcJ,aAAY,SAACC,GAAD,OAAWA,EAAMG,eAC3CC,EAAQL,aAAY,SAACC,GAAD,OAAWA,EAAMI,SACrCC,EAAMN,aAAY,SAACC,GAAD,OAAWA,EAAMK,OACnCC,EAAcP,aAAY,SAACC,GAAD,OAAWA,EAAMM,eAEjD,OACA,sBAAKC,UAAU,WAAf,UACI,2NACA,qBAAIA,UAAU,aAAd,UACI,qBAAIA,UAAU,mBAAd,0DAA4CN,KAC5C,qBAAIM,UAAU,mBAAd,kCAAwCT,KACxC,qBAAIS,UAAU,mBAAd,gEAA6CL,KAC7C,qBAAIK,UAAU,mBAAd,kCAAwCF,KACxC,qBAAIE,UAAU,mBAAd,yFAAkDJ,KAClD,qBAAII,UAAU,mBAAd,qBAA0CH,KAC1C,qBAAIG,UAAU,mBAAd,wHAAwDD,EAAc,eAAO,+BAK1EE,iBAAKX,G,cC1BdY,EAAe,CACnBX,KAAI,UAAEY,aAAaC,QAAQ,eAAvB,QAAkC,GACtCV,WAAU,UAAES,aAAaC,QAAQ,qBAAvB,QAAwC,GAClDT,WAAU,UAAEQ,aAAaC,QAAQ,qBAAvB,QAAwC,GAClDN,IAAG,UAAEK,aAAaC,QAAQ,cAAvB,QAAiC,GACpCR,YAAW,UAAEO,aAAaC,QAAQ,sBAAvB,QAAyC,GACpDP,MAAK,UAAEM,aAAaC,QAAQ,gBAAvB,QAAmC,GACxCL,YAAaM,KAAKC,MAAL,UAAWH,aAAaC,QAAQ,sBAAhC,WAGFG,EAAcC,YAAY,CACrCjB,KAAM,SACNW,eACAO,SAAU,CACRC,YAAa,SAACjB,EAAD,GAAwC,IAAD,IAA7BkB,QAAWC,EAAkB,EAAlBA,GAAIC,EAAc,EAAdA,MACpCpB,EAAMmB,GAAMC,MAKVC,EAAqBP,EAArBO,QAASC,EAAYR,EAAZQ,QAEFL,EAAgBI,EAAhBJ,YAEAK,ICnBTC,G,WAAgB,SAAC,GAAsC,IAAD,EAAnCJ,EAAmC,EAAnCA,GAAIK,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,YACxC,EAA8BC,mBAC5Bd,KAAKC,MAAL,UAAWH,aAAaC,QAAQQ,UAAhC,WADF,mBAAOQ,EAAP,KAAgBC,EAAhB,KAGMC,EAAWC,cAEXC,EAAeC,uBAAY,WAC/BH,EAASZ,EAAY,CAAEE,GAAIA,EAAIC,OAAQO,KACvCC,GAAYD,KACX,CAACE,EAAUD,EAAYT,EAAIQ,IAM9B,OAJAM,qBAAU,WACRvB,aAAawB,QAAQf,EAAIP,KAAKuB,UAAUR,MACvC,CAACR,EAAIQ,IAGN,qBAAKpB,UAAU,WAAf,SACE,wBAAOA,UAAU,iBAAjB,UACGiB,EACAC,GAAe,sBAAMlB,UAAU,cAAhB,eAChB,uBACEA,UAAU,wBACV6B,KAAK,WACLC,SAAUN,EACVJ,QAASA,IACR,WAYInB,iBAAKe,GCrCde,G,MAAa,SAAC,GAAwD,IAAD,EAArDnB,EAAqD,EAArDA,GAAIoB,EAAiD,EAAjDA,iBAAkBf,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,YACvD,EAA0BC,mBAAQ,UAAChB,aAAaC,QAAQQ,UAAtB,QAA6B,IAA/D,mBAAOC,EAAP,KAAcoB,EAAd,KACA,EAA0Bd,mBAAS,IAAnC,mBAAOe,EAAP,KAAcC,EAAd,KACMb,EAAWC,cAEXa,EAAWX,uBACf,SAACZ,GACCsB,EAASH,EAAiBnB,MAE5B,CAACmB,IAGGR,EAAeC,uBACnB,SAACY,GACC,IAAMxB,EAAQwB,EAAEC,OAAOzB,MACvBS,EAASZ,EAAY,CAAEE,KAAIC,WAC3BoB,EAASpB,GACTuB,EAASvB,KAEX,CAACS,EAAUV,EAAIwB,IAGXG,EAAad,uBACjB,SAACY,GACCD,EAASC,EAAEC,OAAOzB,SAEpB,CAACuB,IAOH,OAJAV,qBAAU,WACRvB,aAAawB,QAAQf,EAAIC,KACxB,CAACD,EAAIC,IAGN,sBAAKb,UAAU,QAAf,UACE,wBAAOA,UAAU,eAAjB,UACGiB,EACAC,GAAe,sBAAMlB,UAAU,cAAhB,mBAElB,uBACEwC,OAAQD,EACRvC,UAAU,qBACV6B,KAAK,OACLC,SAAUN,EACVX,MAAOA,IAET,uBAAOb,UAAU,eAAjB,SAAiCkC,SAYxBjC,iBAAK8B,GC1DdU,G,MAAc,SAAC,GAAkC,IAAD,EAA/B7B,EAA+B,EAA/BA,GAAIK,EAA2B,EAA3BA,YAAayB,EAAc,EAAdA,QAChCpB,EAAWC,cACjB,EAAgCJ,mBAAQ,UACtChB,aAAaC,QAAQQ,UADiB,QACVK,GAD9B,mBAAO0B,EAAP,KAAiBC,EAAjB,KAIMpB,EAAeC,uBACnB,SAACY,GACC,IAAMxB,EAAQwB,EAAEC,OAAOzB,MACvBS,EAASZ,EAAY,CAAEE,GAAIA,EAAIC,WAC/B+B,EAAY/B,KAEd,CAAC+B,EAAatB,EAAUV,IAO1B,OAJAc,qBAAU,WACRvB,aAAawB,QAAQf,EAAI+B,KACxB,CAAC/B,EAAI+B,IAGN,sBAAK3C,UAAU,SAAf,UACE,uBAAOA,UAAU,eAAjB,SAAiCiB,IACjC,yBACEjB,UAAU,qBACVa,MAAO8B,EACPb,SAAUN,EAHZ,UAKE,wBAAQX,MAAM,GAAGb,UAAU,iBAA3B,eAGC0C,EAAQG,KAAI,SAACC,GAAD,OACX,wBAAQ9C,UAAU,iBAA8Ba,MAAOiC,EAAvD,SACGA,GADqCA,cAenC7C,iBAAKwC,GCZLM,G,MAzCW,CACxBrD,WAAY,SAACmB,GACX,OAAqB,IAAjBA,EAAMmC,OACD,wFACG,4CAAwBC,KAAKpC,GAE7B,sBAAYoC,KAAKpC,GAEf,GADL,sOAFA,gTAKXtB,KAAM,SAACsB,GACL,OAAqB,IAAjBA,EAAMmC,OACD,gEACG,4CAAwBC,KAAKpC,GAE7B,sBAAYoC,KAAKpC,GAEf,GADL,0NAFA,wRAKXlB,WAAY,SAACkB,GACX,MAAK,4CAAwBoC,KAAKpC,GAEtB,sBAAYoC,KAAKpC,GAEf,GADL,4OAFA,sTAKXjB,YAAa,SAACiB,GACZ,MAAK,yBAAyBoC,KAAKpC,GAG9B,mDAAmDoC,KAAKpC,GAE/C,GADL,uHAHA,6NAMXhB,MAAO,SAACgB,GACN,MAAK,eAAeoC,KAAKpC,GAEX,GADL,mHC7BPqC,EAAO,kBACX,gCACE,mNACA,uBAAMlD,UAAU,OAAhB,UACE,cAAC,EAAD,CACEY,GAAG,aACHK,YAAY,6CACZe,iBAAkBmB,EAAWzD,WAC7BwB,aAAW,IAEb,cAAC,EAAD,CACEN,GAAG,OACHK,YAAY,qBACZe,iBAAkBmB,EAAW5D,KAC7B2B,aAAW,IAEb,cAAC,EAAD,CACEN,GAAG,aACHK,YAAY,mDACZe,iBAAkBmB,EAAWxD,aAE/B,cAAC,EAAD,CACEiB,GAAG,MACHK,YAAY,qBACZyB,QAAS,CAAC,6CAAW,8CACrBU,UAAU,IAEZ,cAAC,EAAD,CACExC,GAAG,cACHK,YAAY,4EACZe,iBAAkBmB,EAAWvD,cAE/B,cAAC,EAAD,CACEgB,GAAG,QACHK,YAAY,QACZe,iBAAkBmB,EAAWtD,QAE/B,cAAC,EAAD,CACEe,GAAG,cACHK,YAAY,2KAMLhB,iBAAKiD,GCrCLG,EAVH,WAEV,OACE,sBAAKrD,UAAU,OAAf,UACC,cAAC,EAAD,IACA,cAAC,EAAD,QCEUsD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJDQ,EAAQC,YAAe,CAClCjD,QAASkD,EACTC,SAAkC,eAAxBC,4IAAYC,UCGxBC,IAASC,OACP,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACE,cAAC,IAAMQ,WAAP,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1BnB,M","file":"static/js/main.c973e605.chunk.js","sourcesContent":["import { memo } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport './Document.css';\r\n\r\nconst Document = () => {\r\n    const name = useSelector((state) => state.name);\r\n    const secondName = useSelector((state) => state.secondName);\r\n    const patronymic = useSelector((state) => state.patronymic);\r\n    const dateOfBirth = useSelector((state) => state.dateOfBirth);\r\n    const email = useSelector((state) => state.email);\r\n    const sex = useSelector((state) => state.sex);\r\n    const advertising = useSelector((state) => state.advertising);\r\n\r\n    return (\r\n    <div className=\"document\">\r\n        <p>Данные, которые будут известны о вас</p>\r\n        <ul className=\"data__list\">\r\n            <li className=\"data-list__field\">Фамилия : {secondName}</li>\r\n            <li className=\"data-list__field\">Имя : {name}</li>\r\n            <li className=\"data-list__field\">Отчество : {patronymic}</li>\r\n            <li className=\"data-list__field\">Пол : {sex}</li>\r\n            <li className=\"data-list__field\">Дата рождения : {dateOfBirth}</li>\r\n            <li className=\"data-list__field\">Email : {email}</li>\r\n            <li className=\"data-list__field\">Согласен на рекламу : {advertising ? 'Да' : 'Нет'}</li>\r\n        </ul>\r\n    </div>)\r\n}\r\n\r\nexport default memo(Document);","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  name: localStorage.getItem('name') ?? '',\r\n  secondName: localStorage.getItem('secondName') ?? '',\r\n  patronymic: localStorage.getItem('patronymic') ?? '',\r\n  sex: localStorage.getItem('sex') ?? '',\r\n  dateOfBirth: localStorage.getItem('dateOfBirth') ?? '',\r\n  email: localStorage.getItem('email') ?? '',\r\n  advertising: JSON.parse(localStorage.getItem('advertising') ?? false),\r\n};\r\n\r\nexport const fieldsSlice = createSlice({\r\n  name: 'fields',\r\n  initialState,\r\n  reducers: {\r\n    changeValue: (state, { payload: { id, value } }) => {\r\n      state[id] = value;\r\n    },\r\n  },\r\n});\r\n\r\nconst { actions, reducer } = fieldsSlice;\r\n\r\nexport const { changeValue } = actions;\r\n\r\nexport default reducer;\r\n","import { memo, useCallback, useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { changeValue } from '../../../redux/Fields/slices';\r\nimport '../Field.css';\r\nimport './CheckboxField.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CheckboxField = ({ id, placeholder, necessarily }) => {\r\n  const [checked, setChecked] = useState(\r\n    JSON.parse(localStorage.getItem(id) ?? false)\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  const handleChange = useCallback(() => {\r\n    dispatch(changeValue({ id: id, value: !checked }));\r\n    setChecked(!checked);\r\n  }, [dispatch, setChecked, id, checked]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(id, JSON.stringify(checked));\r\n  }, [id, checked]);\r\n\r\n  return (\r\n    <div className=\"checkbox\">\r\n      <label className=\"checkbox-label\">\r\n        {placeholder}\r\n        {necessarily && <span className=\"necessarily\">*</span>}\r\n        <input\r\n          className=\"field checkbox__field\"\r\n          type=\"checkbox\"\r\n          onChange={handleChange}\r\n          checked={checked}\r\n        />{' '}\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nCheckboxField.propTypes = {\r\n  id: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  necessarily: PropTypes.bool,\r\n}\r\n\r\nexport default memo(CheckboxField);\r\n","import { memo, useCallback, useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { changeValue } from '../../../redux/Fields/slices';\r\nimport '../Field.css';\r\nimport './InputField.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst InputField = ({ id, validityFunction, placeholder, necessarily }) => {\r\n  const [value, setValue] = useState(localStorage.getItem(id) ?? '');\r\n  const [error, setError] = useState('');\r\n  const dispatch = useDispatch();\r\n\r\n  const validate = useCallback(\r\n    (value) => {\r\n      setError(validityFunction(value));\r\n    },\r\n    [validityFunction]\r\n  );\r\n\r\n  const handleChange = useCallback(\r\n    (e) => {\r\n      const value = e.target.value;\r\n      dispatch(changeValue({ id, value }));\r\n      setValue(value);\r\n      validate(value);\r\n    },\r\n    [dispatch, id, validate]\r\n  );\r\n\r\n  const handleBlur = useCallback(\r\n    (e) => {\r\n      validate(e.target.value);\r\n    },\r\n    [validate]\r\n  );\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(id, value);\r\n  }, [id, value]);\r\n\r\n  return (\r\n    <div className=\"input\">\r\n      <label className=\"header-label\">\r\n        {placeholder}\r\n        {necessarily && <span className=\"necessarily\"> *</span>}\r\n      </label>\r\n      <input\r\n        onBlur={handleBlur}\r\n        className=\"field input__field\"\r\n        type=\"text\"\r\n        onChange={handleChange}\r\n        value={value}\r\n      />\r\n      <label className=\"input__error\">{error}</label>\r\n    </div>\r\n  );\r\n};\r\n\r\nInputField.propTypes = {\r\n  id: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  necessarily: PropTypes.bool,\r\n  validityFunction: PropTypes.func,\r\n}\r\n\r\nexport default memo(InputField);\r\n","import { memo, useCallback, useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { changeValue } from '../../../redux/Fields/slices';\r\nimport '../Field.css';\r\nimport './SelectField.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst SelectField = ({ id, placeholder, options }) => {\r\n  const dispatch = useDispatch();\r\n  const [selected, setSelected] = useState(\r\n    localStorage.getItem(id) ?? placeholder\r\n  );\r\n\r\n  const handleChange = useCallback(\r\n    (e) => {\r\n      const value = e.target.value;\r\n      dispatch(changeValue({ id: id, value }));\r\n      setSelected(value);\r\n    },\r\n    [setSelected, dispatch, id]\r\n  );\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(id, selected);\r\n  }, [id, selected]);\r\n\r\n  return (\r\n    <div className=\"select\">\r\n      <label className=\"header-label\">{placeholder}</label>\r\n      <select\r\n        className=\"field select-field\"\r\n        value={selected}\r\n        onChange={handleChange}\r\n      >\r\n        <option value=\"\" className=\"select__option\">\r\n          -\r\n        </option>\r\n        {options.map((option) => (\r\n          <option className=\"select__option\" key={option} value={option}>\r\n            {option}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nSelectField.propTypes = {\r\n  id: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  options: PropTypes.arrayOf(PropTypes.string),\r\n}\r\n\r\nexport default memo(SelectField);\r\n","const validityFunctions = {\r\n  secondName: (value) => {\r\n    if (value.length === 0) {\r\n      return 'Введите фамилию';\r\n    } else if (!/^[a-zA-Zа-яА-Я\\-'/]+$/.test(value)) {\r\n      return \"Фамилия должно содержать только буквы, символ - или символ '\";\r\n    } else if (!/^[A-ZА-Я]/.test(value)) {\r\n      return 'Первая буква фамилии должна быть заглавной';\r\n    } else return '';\r\n  },\r\n  name: (value) => {\r\n    if (value.length === 0) {\r\n      return 'Введите имя';\r\n    } else if (!/^[a-zA-Zа-яА-Я\\-'/]+$/.test(value)) {\r\n      return \"Имя должно содержать только буквы, символ - или символ '\";\r\n    } else if (!/^[A-ZА-Я]/.test(value)) {\r\n      return 'Первая буква имени должна быть заглавной';\r\n    } else return '';\r\n  },\r\n  patronymic: (value) => {\r\n    if (!/^[a-zA-Zа-яА-Я\\-'/]+$/.test(value)) {\r\n      return \"Отчество должно содержать только буквы, символ - или символ '\";\r\n    } else if (!/^[A-ZА-Я]/.test(value)) {\r\n      return 'Первая буква отчества должна быть заглавной';\r\n    } else return '';\r\n  },\r\n  dateOfBirth: (value) => {\r\n    if (!/^\\d\\d\\.\\d\\d\\.\\d\\d\\d\\d$/.test(value)) {\r\n      return 'Введите дату рождения в формате ДД.ММ.ГГГГ';\r\n    }\r\n    if (!/^(0[1-9]|[12]\\d|3[01])\\.[0-1]\\d\\.(2[09]|19)\\d\\d$/.test(value)) {\r\n      return 'Такая дата невозможна';\r\n    } else return '';\r\n  },\r\n  email: (value) => {\r\n    if (!/\\w+@\\w+\\.\\w+/.test(value)) {\r\n      return 'Введите корректный Email';\r\n    } else return '';\r\n  },\r\n};\r\n\r\nexport default validityFunctions;\r\n","import { memo } from 'react';\r\nimport CheckboxField from '../Field/CheckboxField/CheckboxField.jsx';\r\nimport InputField from '../Field/InputField/InputField.jsx';\r\nimport SelectField from '../Field/SelectField/SelectField.jsx';\r\nimport './Form.css';\r\nimport validation from '../../utils/ValidateFunctions';\r\n\r\nconst Form = () => (\r\n  <div>\r\n    <p>Форма ввода данных о пользователе</p>\r\n    <form className=\"form\">\r\n      <InputField\r\n        id=\"secondName\"\r\n        placeholder=\"Фамилия\"\r\n        validityFunction={validation.secondName}\r\n        necessarily\r\n      />\r\n      <InputField\r\n        id=\"name\"\r\n        placeholder=\"Имя\"\r\n        validityFunction={validation.name}\r\n        necessarily\r\n      />\r\n      <InputField\r\n        id=\"patronymic\"\r\n        placeholder=\"Отчество\"\r\n        validityFunction={validation.patronymic}\r\n      />\r\n      <SelectField\r\n        id=\"sex\"\r\n        placeholder=\"Пол\"\r\n        options={['Мужчина', 'Женщина']}\r\n        optional={false}\r\n      />\r\n      <InputField\r\n        id=\"dateOfBirth\"\r\n        placeholder=\"Дата рождения\"\r\n        validityFunction={validation.dateOfBirth}\r\n      />\r\n      <InputField\r\n        id=\"email\"\r\n        placeholder=\"Email\"\r\n        validityFunction={validation.email}\r\n      />\r\n      <CheckboxField\r\n        id=\"advertising\"\r\n        placeholder=\"Согласен на обработку рекламы\"\r\n      />\r\n    </form>\r\n  </div>\r\n);\r\n\r\nexport default memo(Form);\r\n","import './App.css';\nimport Document from './components/Document/Document';\nimport Form from './components/Form/Form';\n\n\nconst App = () => {\n\n  return (\n    <div className=\"main\">\n     <Form></Form>\n     <Document></Document>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport fieldReducer from './Fields/slices.js';\r\n\r\nexport const store = configureStore({\r\n  reducer: fieldReducer,\r\n  devTools: process.env.NODE_EN !== 'production',\r\n});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './redux/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}